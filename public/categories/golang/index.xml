<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on 妈妈说只要名字长就有笨比跟着念-服务端技术分享</title>
    <link>https://www.ileopold.cn/categories/golang/</link>
    <description>Recent content in Golang on 妈妈说只要名字长就有笨比跟着念-服务端技术分享</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 23 Jan 2024 16:00:23 +0800</lastBuildDate><atom:link href="https://www.ileopold.cn/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Goroutine泄漏</title>
      <link>https://www.ileopold.cn/posts/goroutine-leak/</link>
      <pubDate>Tue, 23 Jan 2024 16:00:23 +0800</pubDate>
      
      <guid>https://www.ileopold.cn/posts/goroutine-leak/</guid>
      <description>问题发现 
压测期间，观察服务Grafana监控面板，发现某些机器内存使用突增，于是上机器进行pprof采样查看内存使用：
go tool pprof -inuse_space 127.0.0.1:8080/debug/pprof/heap go tool pprof -alloc_space 127.0.0.1:8080/debug/pprof/heap 交互式命令行操作，通过top10，没有查找到与监控匹配的内存使用，实际inuse_space在1GB左右，但是RSS在4GB-5GB：

查找一番资料发现，pprof是采样会有误差，而且pprof抓的是堆内存，不包括栈的，有可能没有被GC触发，也有可能还未scavenging归还给操作系统，可以通过获取memstats进行具体计算：
curl 127.0.0.1:8080/debug/pprof/heap?debug=1 HeapInuse // 堆上使用内存的大小 HeapIdle - HeapReleased // 可以归还但是没有归还的内存 Stack // 栈上 因为Stack占用的较多，所以担心会有协程泄漏，但是代码之前review过没有找到相关问题。
问题解决 同样是通过pprof，在非压测期间上机器采样：
go tool pprof 127.0.0.1:8080/debug/pprof/goroutine 
用traces从采样中可以发现头两个runtime.gopark的协程数量很多，同样去其他机器采样发现，没有这两个17w+的runtime.gopark，基本就可以确定是这里出的问题，结合后面的协程信息，发现是协程消费端逻辑问题导致
runtime.gopark runtime.chansend runtime.chansend1 git.garena.com/*/rate_limit/distribute/v2.(*Limiter).batchProcess.func2 子chansend阻塞导致整体消费端runtime.chanrecv阻塞，最终就是相关key的并发请求进来都会因为buffer chan满了，而被gopark起来&amp;hellip; 暂时解决办法将源头的chan，改成长度为1的buffer chan。
Reference  一次线上内存使用率异常问题排查  </description>
    </item>
    
    <item>
      <title>Go Http Client连接复用问题</title>
      <link>https://www.ileopold.cn/posts/go-http-client/</link>
      <pubDate>Sun, 12 Mar 2023 23:03:00 +0800</pubDate>
      
      <guid>https://www.ileopold.cn/posts/go-http-client/</guid>
      <description>背景 发压工具一般都需要提供尽量大的发压能力，发压工具在从Python迁移到Golang的过程中遇到了两个HttpClient连接相关的问题：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  func NewHTTPClient() *http.Client { t := &amp;amp;http.Transport{ DialContext: (&amp;amp;net.Dialer{ Timeout: 30 * time.Second, KeepAlive: 30 * time.Second, }).DialContext, IdleConnTimeout: 180 * time.Second, TLSHandshakeTimeout: 10 * time.Second, ExpectContinueTimeout: 1 * time.Second, MaxIdleConns: 800, MaxIdleConnsPerHost: 800, } return &amp;amp;http.</description>
    </item>
    
    <item>
      <title>领域驱动设计</title>
      <link>https://www.ileopold.cn/posts/ddd/</link>
      <pubDate>Tue, 28 Feb 2023 22:17:02 +0800</pubDate>
      
      <guid>https://www.ileopold.cn/posts/ddd/</guid>
      <description>记录DDD的学习
介绍 传统的MVC架构模型中，Model包含所有的数据逻辑，View包含前端界面，Controller负责控制数据如何展示，容易造成以下问题：
 Controller层非常臃肿 面向数据库表编程 Model是一个纯数据的贫血模型 Model之间的关系复杂 不方便测试  DDD是Eric Evans在2003年出版的《领域驱动设计：软件核心复杂性应对之道》（Domain-Driven Design: Tackling Complexity in the Heart of Software）一书中提出的具有划时代意义的重要概念，是指通过统一语言、业务抽象、领域划分和领域建模等一系列手段来控制软件复杂度的方法论。
其中包含战略设计和战术设计：
 战术设计  代码结构规范  实体、值对象、聚合 工厂 仓储   架构模式  CQRS EDA 分层     战略设计  思想  统一语言 业务为核心   原则  限界上下文 领域模型隔离   规范  领域间的关系 上下文映射      概念  领域，一个领域本质上可以理解为就是一个问题域，只要是同一个领域，那问题域就相同。所以，只要我们确定了系统所属的领域，那这个系统的核心业务，即要解决的关键问题、问题的范围边界就基本确定了。从字面上的能够知道，领域其实就是我们的范围，而范围实际上就是我们的边界，范围定义下来之后，我们根据这个范围去计划我们要做的事情。这就是领域驱动设计。  比如你现在要去做一个电商网站，那么我们的进货，优惠规则，物流仓储，销售报表，这些直接跟业务相关的东西都归属于领域，而所谓领域驱动设计就是需要预先把领域所涉及到的数据，流程以及业务规则搞清楚，然后再通过面向对象的方式去建立一个模型，这个模型就叫做领域模型。我们再去选择合适的技术去对他进行实现。   限界上下文，在DDD中，解系统可以映射为一个个限界上下文，限界上下文就是软件对于问题域的一个特定的、有限的解决方案。 子领域  核心域，指领域中最核心的部分，通常对应企业的核心业务(如商品等&amp;hellip;) 支撑域，是一种特殊的子域，是指为了实现核心业务而不得不开发的业务所对应的相关知识的集合(如促销活动等&amp;hellip;) 通用域，是另一种特殊的子域，对应的是业界已经有成熟方案的业务(登陆，push，短信通知等)   贫血模型，对象里只有get和set方法，或者包含少量的CRUD方法，所有的业务逻辑都不包含在内而是放在业务层。 充血模型，大多业务逻辑和持久化放在Object里，业务层只是简单封装部分业务逻辑以及控制事务、权限等。 Data Object(DO、数据对象)，DO仅仅作为数据库物理表格的映射，不能参与到业务逻辑中。为了简单明了，DO的字段类型和名称应该和数据库物理表格的字段类型和名称一一对应。 Entity(实体对象)，是我们正常业务应该用的业务模型，它的字段和方法应该和业务语言保持一致，和持久化方式无关。 DTO(传输对象)，主要作为Application层的入参和出参，比如CQRS里的Command、Query、Event，以及Request、Response等都属于DTO的范畴。DTO的价值在于适配不同的业务场景的入参和出参，避免让业务对象变成一个万能大对象。  值对象，一种特殊的领域模型，不可变，通过值判断同一性。 聚合和聚合根，聚合是用来确保这些领域对象在实现共同的业务逻辑时，能保证数据的一致性。每个聚合内部有一个外部访问聚合的唯一入口，称为聚合根。每个聚合中应确定唯一的聚合根实体。 工厂(Factory)，在设计模式中我们通过工厂实现多态对象、单例对象或某种需要特殊构造的对象的实例化。在 DDD 中，当我们需要一个新的实体的时候，我们就需要通过工厂来生成实体，保证实体创建即一致（区别于直接NEW对象）。 仓储(Repository)，主要有两个核心功能：持久化实体，将实体持久化到底层的数据库中；重建实体，实体持久化后当我们需要再次使用的时候需要从数据库的数据重建实体 防腐层，用于做适配器、增加缓存、逻辑兜底、方便测试、实现功能开关  案例分析 设计一个转账服务：</description>
    </item>
    
    <item>
      <title>Golang PProf工具使用</title>
      <link>https://www.ileopold.cn/posts/golang-pprof/</link>
      <pubDate>Mon, 27 Feb 2023 17:02:32 +0800</pubDate>
      
      <guid>https://www.ileopold.cn/posts/golang-pprof/</guid>
      <description>背景 工作中经常会遇到一些常见的Go问题，比如锁竞争、内存占用过高、CPU 占用过高、协程泄露、阻塞操作、GC频繁内存回收等，我们可以通过官方的PProf工具进行迅速排查定位问题，最近工作的2家公司线上服务也都集成了PProf采集和分析的WEB UI工具，所以这是一个非常实在的功能。
使用 一般的基本引入包自动init，并且开启http服务就会默认注册debug路由，如下所示：
import	_ &amp;#34;net/http/pprof&amp;#34; //nolint // ... _ = http.ListenAndServe(&amp;#34;:8080&amp;#34;, nil) 常用的性能分析指标有：
   类型 描述     profile CPU占用情况   heap 堆上内存的使用情况   goroutine 当前所有协程的情况   allocs 内存分配情况   blocks 阻塞操作情况   trace 程序运行跟踪情况    对于在线采集分析可以用下面的命令：
// cpu go tool pprof http://localhost:8080/debug/pprof/profile // 堆内存 go tool pprof http://localhost:8080/debug/pprof/heap // 协程 go tool pprof http://localhost:8080/debug/pprof/goroutine // etc .</description>
    </item>
    
    <item>
      <title>Redis分布式限流器</title>
      <link>https://www.ileopold.cn/posts/redis-rate-limiter/</link>
      <pubDate>Wed, 22 Feb 2023 22:48:51 +0800</pubDate>
      
      <guid>https://www.ileopold.cn/posts/redis-rate-limiter/</guid>
      <description>压测场景下，需要准确控制endpoint的发压QPS，因为压测机器很多，所以需要一个分布式限流器来对压力进行控制。
策略上 基于令牌桶 参考go-zero中的tokenlimit实现，原理即通过eval执行下面的lua脚本，一句话概括就是对于一个key，每次请求获取最近一次变更的时间戳以及剩余的token数，计算时间差按照平均速率能增加多少token，总和token数能不能满足本次的token数需求：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  local rate = tonumber(ARGV[1]) local capacity = tonumber(ARGV[2]) local now = tonumber(ARGV[3]) -- current timestamp may need redis.call(&amp;#34;TIME&amp;#34;) local requested = tonumber(ARGV[4]) local fill_time = capacity/rate local ttl = math.floor(fill_time*2) local last_tokens = tonumber(redis.call(&amp;#34;get&amp;#34;, KEYS[1])) if last_tokens == nil then last_tokens = capacity end local last_refreshed = tonumber(redis.</description>
    </item>
    
    <item>
      <title>Go Runtime Throws Gorountine Stack Dumps</title>
      <link>https://www.ileopold.cn/posts/go-runtime-throws-goruntine-stack/</link>
      <pubDate>Mon, 20 Feb 2023 21:18:07 +0800</pubDate>
      
      <guid>https://www.ileopold.cn/posts/go-runtime-throws-goruntine-stack/</guid>
      <description>同事抛来一个错误日志，让我通过日志定位问题，日志关键内容如下：
STDOUT detail: application crashes/exits early: application exits with code 2 ....blahblah... STDOUT goroutine 2070 [IO wait]: ....blahblah... STDOUT goroutine 2098 [chan receive]: ....blahblah... STDOUT goroutine 1771 [chan receive]: ....blahblah... 以前也在线上环境看到过类似的日志，当时就是觉得和pprof采集的goroutine堆栈信息比较像，但是单看他发的这几个goroutine的堆栈代码，代码逻辑没有问题，于是开始怀疑他给的日志不全，主动上平台查看日志发现完整的日志文件被截断了，查看完整的文件发现打印了一堆协程的堆栈，其中第一行打印了具体的原因：
fatal error: concurrent map read and map write goroutine 391 [running]: runtime.throw({0x330ef38?, 0x2c82480?}) /usr/local/go/src/runtime/panic.go:992 +0x71 fp=0xc003371488 sp=0xc003371458 pc=0x436491 runtime.mapaccess2_faststr(0x0?, 0x0?, {0xc0026e8497, 0x28}) /usr/local/go/src/runtime/map_faststr.go:117 +0x3d4 fp=0xc0033714f0 sp=0xc003371488 pc=0x4133b4 git.blahblah.com/blahblah/internal/clients/rate_limit/distribute/v2.findLimiter({0xc0026e8497, 0x28}) 继而查看业务代码，确实是在并发操作map时，可能存在写map的同时，有协程对map进行读取，导致fatal error，关于这个问题，之前在 Golang Map 源码分析 中提到过。
那这些goroutine的日志是谁打印的呢，以上面的错误为例，查看源码，是runtime throw出来的：</description>
    </item>
    
    <item>
      <title>Golang Map 源码分析</title>
      <link>https://www.ileopold.cn/posts/golang-map/</link>
      <pubDate>Sat, 05 Mar 2022 16:52:36 +0800</pubDate>
      
      <guid>https://www.ileopold.cn/posts/golang-map/</guid>
      <description>目标 需要弄懂下面的问题：
 map的基本数据结构定义 map的增、删、改、查的实现 扩容机制 range map为什么是无序的 map为什么不安全，以及sync.Map为什么安全  工具 go tool compile -S main.go 通过上面命令可以输出汇编指令，方便获取实际调用的方法。
数据结构 map对应的数据结构为hmap： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  const ( bucketCntBits = 3 bucketCnt = 1 &amp;lt;&amp;lt; bucketCntBits ) type hmap struct { count int // 指map的count数量 	flags uint8 // 迭代map或者对map进行写操作的时候，会记录该标志位，用于一些并发场景的检测校验 	B uint8 // 存放当前map存放的bucket数组长度的对数，即len(buckets) == 2^B 	noverflow uint16 // 溢出的bucket数量 	hash0 uint32 // hash函数种子  buckets unsafe.</description>
    </item>
    
    <item>
      <title>你可能不知道的Golang用法</title>
      <link>https://www.ileopold.cn/posts/golang-tricky/</link>
      <pubDate>Wed, 02 Mar 2022 23:11:39 +0800</pubDate>
      
      <guid>https://www.ileopold.cn/posts/golang-tricky/</guid>
      <description>记录比较奇怪的Golang用法。
#1 Defer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  func main(){ f1() } func f1(){ defer trace_leave(trace_enter(&amp;#34;f1()&amp;#34;)) fmt.Println(&amp;#34;f1()程序逻辑&amp;#34;) } func trace_enter(msg string) string{ fmt.Println(&amp;#34;enter: &amp;#34;,msg) return msg } func trace_leave(msg string) { fmt.Println(&amp;#34;leave: &amp;#34;,msg) } // enter: f1() // f1()程序逻辑 // leave: f1()    如上代码片段所示，会先首先执行trace_enter，再处理逻辑代码，最后trace_leave。</description>
    </item>
    
    <item>
      <title>Golang 垃圾回收</title>
      <link>https://www.ileopold.cn/posts/golang-gc/</link>
      <pubDate>Wed, 23 Feb 2022 21:44:07 +0800</pubDate>
      
      <guid>https://www.ileopold.cn/posts/golang-gc/</guid>
      <description>垃圾回收历史 目前提供GC的语言有Python、PHP、Java、Javascript&amp;hellip;，同时比如C、C++被设计为手动管理内存，但是也可以自行实现GC，还有Rust可以在编译器，依靠编译器插入清理代码的方式，精准清理。
Golang GC Changelog  Go 1：单线程版的标记清扫，全过程STW Go 1.3：标记阶段STW, 清扫阶段并行执行，停顿时间在约几百毫秒 Go 1.5：三色标记，标记和清扫可以并行执行，但是标记阶段的前后需要STW来做GC的准备，停顿时间在一百毫秒以内 Go 1.6：使用 bitmap 来记录回收内存的位置，大幅优化垃圾回收器自身消耗的内存，停顿时间在十毫秒以内 Go 1.7：独立栈收缩，停顿时间控制在两毫秒以内 Go 1.8：混合写屏障，停顿时间在半毫秒左右 Go 1.9：彻底移除了栈的重扫描过程 Go 1.12：整合了两个阶段的 Mark Termination Go 1.13：着手解决向操作系统归还内存的，提出了新的 Scavenger Go 1.14：替代了仅存活了一个版本的 scavenger，全新的页分配器，优化分配内存过程的速率与现有的扩展性问题，并引入了异步抢占，解决了由于密集循环导致的 STW 时间过长的问题  GC 策略 Golang使用的策略 The GC runs concurrently with mutator threads, is type accurate (aka precise), allows multiple GC thread to run in parallel. It is a concurrent mark and sweep that uses a write barrier.</description>
    </item>
    
    <item>
      <title>Golang 逃逸分析</title>
      <link>https://www.ileopold.cn/posts/golang-escape-analysis/</link>
      <pubDate>Sun, 30 Jan 2022 17:30:52 +0800</pubDate>
      
      <guid>https://www.ileopold.cn/posts/golang-escape-analysis/</guid>
      <description>通过GopherCon TW 2020的分享来理解下逃逸分析。
.aspect-ratio {position: relative;width: 100%;height: 0;padding-bottom: 75%;}.aspect-ratio iframe {position: absolute;width: 100%;height: 100%;left: 0;top: 0;}什么是逃逸分析 C/C++没有垃圾回收机制，都是开发人员进行内存分配，要么分配到栈，要么分配到堆上，同时堆内存对象的生命周期管理给开发人员带来了心智负担，为了降低这方面的心智负担，有的编程语言比如Go、Java就支持了垃圾回收，当分配到堆上的对象不再被引用时，就会被回收。
垃圾回收带来了便利，但是也带来了性能损耗，堆内存对象过多会给垃圾回收带来压力，所以需要尽量减少在堆上的内存分配。 逃逸分析（escape analysis）就是在程序编译阶段根据程序代码中的数据流，对代码中哪些变量需要在栈上分配，哪些变量需要在堆上分配进行静态分析的方法。
栈 vs 堆 Go中声明变量的具体分配策略如下：
 堆上  全局存储空间 共享的存储对象 被GC管理的存储对象   栈上  函数内部的本地存储空间 协程自己的栈帧 私有的存储对象 帧生命周期内的存储对象    从变量声明角度，堆和栈的差异：
 在栈上分配的对象比在堆上快很多 协程可以完全控制自己的栈帧 栈上，没有锁，没有GC，开销少  下面通过Benchmark来证明栈的优势，具体代码参考escape_analysis_test.go：
逃逸分析如何运行 基本概念  逃逸分析在源码库中的代码：escape.</description>
    </item>
    
    <item>
      <title>关于 Golang Slice，你知道的不多</title>
      <link>https://www.ileopold.cn/posts/golang-slice/</link>
      <pubDate>Sun, 30 Jan 2022 17:18:44 +0800</pubDate>
      
      <guid>https://www.ileopold.cn/posts/golang-slice/</guid>
      <description>前言 切片是Golang中的一等公民，业务代码中广泛使用，这里记录下以下几个问题：
 切片的数据结构是什么？如何实现扩容？ 切片有哪些少见的高级用法？ 什么时候应该使用数组，而不是切片？  数据结构 编译期类型为 Slice，运行期为 SliceHeader，具体结构如下： 1 2 3 4 5  type SliceHeader struct { Data uintptr Len int Cap int }  
初始化 使用下标初始化 ./ssa.html 如下： 1 2 3 4  v11 (8) = Load &amp;lt;*[3]int&amp;gt; v10 v9 (&amp;amp;arr[*[3]int]) v25 (9) = Const64 &amp;lt;int&amp;gt; [1] v26 (9) = Const64 &amp;lt;int&amp;gt; [3] v27 (9) = SliceMake &amp;lt;[]int&amp;gt; v11 v25 v26</description>
    </item>
    
    <item>
      <title>Golang unsafe Pointer 怎么用</title>
      <link>https://www.ileopold.cn/posts/golang-unsafe-pointer/</link>
      <pubDate>Sun, 23 Jan 2022 16:00:23 +0800</pubDate>
      
      <guid>https://www.ileopold.cn/posts/golang-unsafe-pointer/</guid>
      <description>起源 Golang官方库strings.Builder，高效处理字符串，最小化内存拷贝，其中获取字符串方法里，使用了unsafe.Pointer进行字节数组到字符串的转换：
func (b *Builder) String() string { return *(*string)(unsafe.Pointer(&amp;amp;b.buf)) } 既然官方都这么用了，写了个[]byte和string互相转换的benchmark，测试结果如下：
goos: darwin goarch: amd64 pkg: github.com/biexiang/code-snippet/str_byte BenchmarkStrByte/NormalBenchmarkStr2Byte-4 100000000	12.1 ns/op	0 B/op	0 allocs/op BenchmarkStrByte/UnsafeBenchmarkStr2Byte-4 1000000000	0.322 ns/op	0 B/op	0 allocs/op BenchmarkStrByte/NormalBenchmarkByte2Str-4 204761924	5.75 ns/op	0 B/op	0 allocs/op BenchmarkStrByte/UnsafeBenchmarkByte2Str-4 1000000000	0.317 ns/op	0 B/op	0 allocs/op PASS 可见，时间效率提升确实很高，但是包名叫unsafe，就很迷惑，我们到底什么时候可以用这个包呢？😂
简单介绍 Golang里的指针分为类型安全指针和非类型安全指针，前者就是*T这种基类型为T的指针，后者就是这里提到的unsafe.Pointer。
类型安全指针有以下限制：
 不支持算术运算 不能被随意转换为另一个指针类型 不能和其他任一指针类型的值进行比较 不能被赋值给其他任意类型的指针值  非类型安全指针刚好支持如下操作：
 任何类型的指针都可以转为unsafe.Pointer unsafe.Pointer可以转为任何类型的指针值 uintptr可以转为unsafe.Pointer unsafe.</description>
    </item>
    
    <item>
      <title>Golang Channel 原理</title>
      <link>https://www.ileopold.cn/posts/golang-channel/</link>
      <pubDate>Sun, 16 Jan 2022 22:07:24 +0800</pubDate>
      
      <guid>https://www.ileopold.cn/posts/golang-channel/</guid>
      <description>Do not communicate by sharing memory; instead, share memory by communicating.
 简单使用 channel的创建、发送、接收、关闭的简单使用如下：
通过dlv debug进行disass可以知道主要调用下面几个方法，本次也主要分析这些方法的调用。
 runtime.makechan，创建一个channel runtime.chansend1，发送数据 runtime.chanrecv1，接收数据 runtime.closechan，关闭channel  数据结构 channel的数据结构hchan如下：
type hchan struct { qcount uint // chan队列长度 dataqsiz uint // chan队列容量 buf unsafe.Pointer // 队列指针 sendx uint // 发送的当前索引 recvx uint // 接收的当前索引 elemsize uint16 // elem结构的大小，用于计算缓冲区所需的大小 elemtype *_type // chan的数据类型 recvq waitq // 接收协程队列 sendq waitq // 发送协程队列 closed uint32 // 是否关闭 lock mutex // 互斥锁 } hchan里一共有三个队列，channel数据的缓冲区是循环队列，sendq和recvq是链表队列，都是FIFO。</description>
    </item>
    
    <item>
      <title>Golang database/sql 源码分享</title>
      <link>https://www.ileopold.cn/posts/golang-database-sql/</link>
      <pubDate>Thu, 23 Dec 2021 16:19:36 +0800</pubDate>
      
      <guid>https://www.ileopold.cn/posts/golang-database-sql/</guid>
      <description>起因，同事组织部门分享，于是有了这次的分享，分享形式是 PPT + oneNote 看源码。因为之前从来没有做过技术的分享，还算有趣的体验，这种被定了deadline的模式，感觉可以推动自己去学习进步。
PPT： Google Slide
benchmark：go-sql-test
oneNote：read code</description>
    </item>
    
  </channel>
</rss>
