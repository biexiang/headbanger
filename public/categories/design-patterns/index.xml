<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design Patterns on 妈妈说只要名字长就有笨比跟着念-服务端技术分享</title>
    <link>https://www.ileopold.cn/categories/design-patterns/</link>
    <description>Recent content in Design Patterns on 妈妈说只要名字长就有笨比跟着念-服务端技术分享</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 28 Feb 2023 22:17:02 +0800</lastBuildDate><atom:link href="https://www.ileopold.cn/categories/design-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>领域驱动设计</title>
      <link>https://www.ileopold.cn/posts/ddd/</link>
      <pubDate>Tue, 28 Feb 2023 22:17:02 +0800</pubDate>
      
      <guid>https://www.ileopold.cn/posts/ddd/</guid>
      <description>记录DDD的学习
介绍 传统的MVC架构模型中，Model包含所有的数据逻辑，View包含前端界面，Controller负责控制数据如何展示，容易造成以下问题：
 Controller层非常臃肿 面向数据库表编程 Model是一个纯数据的贫血模型 Model之间的关系复杂 不方便测试  DDD是Eric Evans在2003年出版的《领域驱动设计：软件核心复杂性应对之道》（Domain-Driven Design: Tackling Complexity in the Heart of Software）一书中提出的具有划时代意义的重要概念，是指通过统一语言、业务抽象、领域划分和领域建模等一系列手段来控制软件复杂度的方法论。
其中包含战略设计和战术设计：
 战术设计  代码结构规范  实体、值对象、聚合 工厂 仓储   架构模式  CQRS EDA 分层     战略设计  思想  统一语言 业务为核心   原则  限界上下文 领域模型隔离   规范  领域间的关系 上下文映射      概念  领域，一个领域本质上可以理解为就是一个问题域，只要是同一个领域，那问题域就相同。所以，只要我们确定了系统所属的领域，那这个系统的核心业务，即要解决的关键问题、问题的范围边界就基本确定了。从字面上的能够知道，领域其实就是我们的范围，而范围实际上就是我们的边界，范围定义下来之后，我们根据这个范围去计划我们要做的事情。这就是领域驱动设计。  比如你现在要去做一个电商网站，那么我们的进货，优惠规则，物流仓储，销售报表，这些直接跟业务相关的东西都归属于领域，而所谓领域驱动设计就是需要预先把领域所涉及到的数据，流程以及业务规则搞清楚，然后再通过面向对象的方式去建立一个模型，这个模型就叫做领域模型。我们再去选择合适的技术去对他进行实现。   限界上下文，在DDD中，解系统可以映射为一个个限界上下文，限界上下文就是软件对于问题域的一个特定的、有限的解决方案。 子领域  核心域，指领域中最核心的部分，通常对应企业的核心业务(如商品等&amp;hellip;) 支撑域，是一种特殊的子域，是指为了实现核心业务而不得不开发的业务所对应的相关知识的集合(如促销活动等&amp;hellip;) 通用域，是另一种特殊的子域，对应的是业界已经有成熟方案的业务(登陆，push，短信通知等)   贫血模型，对象里只有get和set方法，或者包含少量的CRUD方法，所有的业务逻辑都不包含在内而是放在业务层。 充血模型，大多业务逻辑和持久化放在Object里，业务层只是简单封装部分业务逻辑以及控制事务、权限等。 Data Object(DO、数据对象)，DO仅仅作为数据库物理表格的映射，不能参与到业务逻辑中。为了简单明了，DO的字段类型和名称应该和数据库物理表格的字段类型和名称一一对应。 Entity(实体对象)，是我们正常业务应该用的业务模型，它的字段和方法应该和业务语言保持一致，和持久化方式无关。 DTO(传输对象)，主要作为Application层的入参和出参，比如CQRS里的Command、Query、Event，以及Request、Response等都属于DTO的范畴。DTO的价值在于适配不同的业务场景的入参和出参，避免让业务对象变成一个万能大对象。  值对象，一种特殊的领域模型，不可变，通过值判断同一性。 聚合和聚合根，聚合是用来确保这些领域对象在实现共同的业务逻辑时，能保证数据的一致性。每个聚合内部有一个外部访问聚合的唯一入口，称为聚合根。每个聚合中应确定唯一的聚合根实体。 工厂(Factory)，在设计模式中我们通过工厂实现多态对象、单例对象或某种需要特殊构造的对象的实例化。在 DDD 中，当我们需要一个新的实体的时候，我们就需要通过工厂来生成实体，保证实体创建即一致（区别于直接NEW对象）。 仓储(Repository)，主要有两个核心功能：持久化实体，将实体持久化到底层的数据库中；重建实体，实体持久化后当我们需要再次使用的时候需要从数据库的数据重建实体 防腐层，用于做适配器、增加缓存、逻辑兜底、方便测试、实现功能开关  案例分析 设计一个转账服务：</description>
    </item>
    
  </channel>
</rss>
